anova(model3,model2)
anova(model2,model3)
?anova
anova(model2)
anova(lm(mpg~.,data=mtcars))
data(shuttle)
library(MASS)
data(shuttle)
model <- glm(auto ~ wind, family="binomial", data=shuttle)
View(shuttle)
model <- glm(use ~ wind, family="binomial", data=shuttle)
summary(glm)
summary(model)
oneminus <- glm(1-use ~ wind, family="binomial", data=shuttle)
oneminus <- glm((1-use) ~ wind, family="binomial", data=shuttle)
data(InsectSprays)
View(InsectSprays)
sprays <- glm(count~spray, family="poisson", data=InsectSprays)
summary(sprays)
sprays <- glm(count~spray, offset=log(count),family="poisson", data=InsectSprays)
sprays <- glm(count~spray, offset=log(count+1),family="poisson", data=InsectSprays)
summary(sprays)
sprays <- glm(count~spray, family="poisson", data=InsectSprays)
summary(sprays)
coef(.05588)
exp(coef(lm(I(log(InsectSprays$count))~InsectSprays$spray)))
exp(coef(lm(I(log(InsectSprays$count+1))~InsectSprays$spray)))
summary(model)
exp(-.03181)
View(shuttle)
summary(sprays)
exp(.05588)
exp(2.67415) - exp(.05588)
model2<-glm(use~wind+magn, family="binomial", data=shuttle)
summary(model2)
exp(-.03201)
summary(sprays)
exp(2.67415 - .05588)
exp(2.67415)
exp(2.67415)/exp(14.5002)
exp(2.67415)/exp(2.7415+.05588)
exp(2.67415)/exp(2.7415-.05588)
log(exp(2.67415-.05588))
log(exp(2.67415+.05588))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms<-sapply(knots,function(knot) (x>knot) * (x-knot))
xMat<-cbind(1,x,splineTerms)
yhat <- predict(lm(y~xMat-1))
plot(x,y)
lines(x,yhat,col="red")
summary(sprays)
exp(2.67415 + .05588)
log(exp(2.67415 + .05588))
exp(2.67415)
14.50002/15.33335
rm(knots,model,model2,sprays,x,y,yhat)
rm(splineTerms,xMat)
model3 <- glm((1-use)~wind,family=binomial,data=shuttle)
shuttle$use = noauto -> shuttle$use1=1
shuttle$use = noauto -> shuttle$use1<-1
model2<-glm(as.numeric(use) ~ wind, family=binomial,data=shuttle)
as.numeric(use)
as.numeric(use$shuttle)
as.numeric(shuttle$use)
model2<-glm(as.numeric(use-1) ~ wind, family=binomial,data=shuttle)
model2<-glm(as.numeric(use)-1 ~ wind, family=binomial,data=shuttle)
summary(model2)
model<-glm(use~wind,family=binomial,data=shuttle)
summary(model)
model<-glm(1-(use~wind),family=binomial,data=shuttle)
library(caret)
install.package(caret)
package.install(caret)
install.packages(caret)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
View(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData=data.frame(predictors)
trainIndex=createDataPartition(diagnosis,p=.5,list=FALSE)
training = adData[trainIndex]
testing=adData[-trainIndex]
rm(adData,predictors,trainIndex,diagnosis,testing,training)
data(concrete)
set.seed(975)
inTrain=createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
data(AlzheimerDisease)
adData=data.frame(predictors)
trainIndex=createDataPartition(diagnosis,p=.5,list=FALSE)
training1=adData[trainIndex,]
testing1=adData[-trainIndex,]
rm(training1,testing1,adData)
featurePlot(x=training)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, colour=training$FlyAsh)
plot(training$CompressiveStrength, color=training$FlyAsh)
qplot(CompressiveStrength, colour=., data=training)
qplot(CompressiveStrength, colour=FlyAsh, data=training)
qplot(CompressiveStrength, Index colour=FlyAsh, data=training)
qplot(CompressiveStrength, Index, colour=FlyAsh, data=training)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
log(0)
plot(training$CompressiveStrength)
View(training)
View(training)
package(Hmisc)
library(Hmisc)
?cut2
nsv <- nearZeroVar(training,saveMetrics=T)
nsv
plot(training$CompressiveStrength, col=cut2(training$FlyAsh,breaks=10))
cut2?
;
?cut2
plot(training$CompressiveStrength, col=cut2(training$FlyAsh,g=10))
plot(training$CompressiveStrength, col=cut2(training$FlyAsh,g=4))
plot(training$CompressiveStrength, col=cut2(training$BlastFurnaceSlag,g=4))
plot(training$CompressiveStrength, col=cut2(training$Cement,g=4))
plot(training$CompressiveStrength, col=cut2(training$Water,g=4))
plot(training$CompressiveStrength, col=cut2(training$Superplasticizer,g=4))
plot(training$CompressiveStrength, col=cut2(training$CoarseAggregate,g=4))
plot(training$CompressiveStrength, col=cut2(training$FineAggregate,g=4))
plot(training$CompressiveStrength, col=cut2(training$Age,g=4))
rm(concrete)
rm(mixtures,nsv,predictors,testing,trainIndex,training,diagnosis,inTrain)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
smallPredictors<-predictors[,"IL*"]
smallPredictors<-predictors[,grep("^IL")]
?grep
smallPredictors<-predictors[,grep("^IL", x=predictors)]
View(smallPredictors)
grep("^IL", x=predictors)
grep(predictors[,"^IL"])
grep(predictors[,"^IL"], x=predictors)
column.names[grep("^IL", column.names(predictors))]
column.names(predictors)
smallPrecitors <- predictors[,grep("^IL",colnames(predictors))]
smallPredictors <- predictors[,grep("^IL",colnames(predictors))]
rm(smallPrecitors)
View(smallPredictors)
preProc <- preProcess(smallPredictors,method="pca")
?preProcess
preProc <- preProcess(smallPredictors,method="pca",thresh=.8)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=.7, list=F)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
install.packages("rpart")
install.packages("rpart")
modFit <- train(Case ~ ., method="rpart", data=training)
library(caret)
modFit <- train(Case ~ ., method="rpart", data=training)
install.packages("e1071")
modFit <- train(Case ~ ., method="rpart", data=training)
?predict
predict(modFit, c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
predict(modFit, c("TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2"))
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$FinalModel)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
View(segmentationOriginal)
View(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
View(segmentationOriginal)
rm(segmentationOriginal)
data(segmentationOriginal)
View(inTrain)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case)
training <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(y=segmentationOriginal$Case, list=F)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Class ~ ., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
summary(modFit)
summary(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgmm)
install.packages("pgmm")
data(olive)
library(pgmm)
data(olive)
olive=olive[,-1]
modFit <- train(Area ~ ., method = "class", data=olive)
modFit <- train(Area ~ ., method = "rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
?tree
install.packages("tree")
?tree
predict(modFit, newdata=newdata)
View(olive)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missclass(trainSA, modFit)
missClass(trainSA, predict(modFit, trainSA))
missClass(trainSA, modFit,)
missClass(trainSA, modFit)
missClass(trainSA, predict(modFit, trainSA))
missClass(testSA, predict(modFit, testSA))
predict(modFit,testSA)
missClass(testSA$chd, predict(modFit, testSA))
missClass(trainSA$chd, predict(modFit, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(SAheart,inTrain,newdata,olive,segmentationOriginal,testSA,testing,trainSA,training)
rm(train)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
modFit <- train(y ~ .,data=vowel.train,method="rf")
rm(modFit)
modFit <- train(y ~ .,data=vowel.train,method="rf")
varlmp(modFit)
package(caret)
library(caret)
varlmp(modFit)
varimp(modFit)
varImp(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
as.factor(vowel.test)
as.factor(vowel.test$y)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
library(caret)
modFit1<-train(y~., data=vowel.test, method="rf")
modFit2<-train(y~., data=vowel.test, method="gbm")
accuracy(modFit1, modFit2)
library(quantmod)
accuracy(modFit1, modFit2)
modFit1<-train(y~., data=vowel.train, method="rf")
modFit2<-train(y~., data=vowel.train, method="gbm")
pred1 <- predict(modFit1, vowel.test)
pred2 <- predict(modFit2, vowel.test)
predDF <- data.frame(pred1, pred2, y=vowel.test$y)
combModFit<-train(y~., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
install.packages(forecast)
install.packages("forecast")
library(forecast)
?forecast
?accuracy
accuracy(modFit1, vowel.test$y)
accuracy(pred1, vowel.test$y)
qplot(pred1, pred2, color=y, data=vowel.train)
qplot(pred1,pred2)
qplot(pred1,pred2,color=y)
qplot(pred1,pred2,color=y,data=vowel.train)
qplot(pred1,pred2)
confustionMatrix(pred1, vowel.train$y)
confusionMatrix(pred1, vowel.train$y)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
rm(predDF,vowel.test,vowel.train,combModFit,combPred,modFit1,modFit2,pred1,pred2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fitRF <- train(diagnosis ~ ., method="rf", data=training)
fitgbm <- train(diagnosis ~ ., method="gbm", data=training)
fitlda <- train(diagnosis ~ ., method="lda", data=training)
pred1 <- predict(fitRF, training$diagnosis)
pred1 <- predict(fitRF, training)
pred2 <- predict(fitgbm, training)
pred3 <- predict(figlda, training)
pred3 <- predict(fitlda, training)
confusionMatrix(fitRF)
pred3 <- predict(fitlda, testing)
pred2 <- predict(fitgbm, testing)
pred1 <- predict(fitRF, testing)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
predDF <- data.frame(pred1,pred2,pred3,diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~ ., method="gam", data=predDF)
combPred<-predict(combModFit, predDF)
confusionmatrix(combPred)
confusionMatrix(combPred)
confusionMatrix(combPred, testing)
confusionMatrix(combPred, testing$diagnosis)
combModFit <- predict(combModFit,testing)
confusionMatrix(conbModFit, testing$diagnosis)
confusionMatrix(combModFit, testing$diagnosis)
View(testing)
View(predDF)
combModFit <- train(diagnosis ~ ., method="gam", data=predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combModFit, predDF$diagnosis)
confusionMatrix(combPred, predDF$diagnosis)
combModFit <- train(diagnosis ~ ., method="rf", data=predDF)
pred4 <- predict(combModFit, testing)
confusionMatrix(combModFit, testing)
confusionMatrix(combModFit, testing$diagnosis)
confusionMatrix(pred4, testing$diagnosis)
c1 <- confusionMatrix(pred1, testing$diagnosis)
c2 <- confusionMatrix(pred2, testing$diagnosis)
c3 <- confusionMatrix(pred3, testing$diagnosis)
c4 <- confusionMatrix(pred4, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(233)
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
plot.enet(fit$finalModel, xvar = "penalty", use.color = TRUE)
rm(predDF,predictors,testing,training,concrete,mixtures,adData,c1,c2,c3,c4,pred1,pred2,pred3,pred4)
rm(combModFit,combPred,diagnosis,fit,fitRF,fitgbm,fitlda,inTrain)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
library(caret)
fit <- train(CompressiveStrength ~ ., data = training, method="svmRadial")
pred <- predict(fit,testing)
accuracy(prediction, testing$CompressiveStrength)
accuracy(pred, testing$CompressiveStrength)
install.packages("shiny")
library.install("rCharts")
install.packages("rCharts")
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("base64enc")
library(devtools)
install_github("ramnathv/rCharts@dev")
library("rCharts")
install.packages("googleVis")
devtools::install_github('rstudio/shinapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='justindlea', token='FF7A8F1B9B6C8C7809485A8594E99C6D', secret='Tf3p4n2KZR9WWqM/wLyR9fBfWPhyckyGgBdb6HFj')
shinyapps::setAccountInfo(name='justindlea', token='FF7A8F1B9B6C8C7809485A8594E99C6D', secret='Tf3p4n2KZR9WWqM/wLyR9fBfWPhyckyGgBdb6HFj')
shinyapps::setAccountInfo(name='justindlea', token='FF7A8F1B9B6C8C7809485A8594E99C6D', secret='Tf3p4n2KZR9WWqM/wLyR9fBfWPhyckyGgBdb6HFj')
shinyapps::setAccountInfo(name='justindlea', token='FF7A8F1B9B6C8C7809485A8594E99C6D', secret='Tf3p4n2KZR9WWqM/wLyR9fBfWPhyckyGgBdb6HFj')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myplot(s), s=slider(0,2,step=0.1))
manipulate(myPlot(s), s=slider(0,2,step=0.1))
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
setwd("C:\\datascience\\investment\\NFL Plays\\Data")
library(shiny)
runApp()
shiny::runApp()
load('.RData')
rm(sea)
team <- subset(core, core$OFF=='GB', core$DWN==2, core$ZONE==1, core$YTG>=4, core$YTG<=6, core$PTSO - core$PTSD<0)
shiny::runApp()
shiny::runApp()
setwd("C:\\datascience\\dataproducts")
load(".RData")
rm(core,player,rush,pass)
data(mtcars)
load(mtcars)
View(mtcars)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
model<-lm(mpg~cyl+wt,data=mtcars)
?predict
View(mtcars)
predict(model, cyl=8, wt=3.44)
?predict.lm
predict.lm(model, cyl=8, wt=3.44)
predict.lm(model, cyl=8, wt=3.44, fun=mean)
?lm
predict(model, data.frame(cyl=8, wt=3.44))
shiny::runApp()
View(mtcars)
?as
?as.numeric
shiny::runApp()
mean(mtcars$wt)
rm(model,mtcars)
shiny::runApp()
shiny::runApp()
data(cars)
mean(cars$cyl)
View(cars)
rm(cars)
?anova
rm(mtcars)
shiny::runApp()
library(shinyapps)
shiny::runApp()
rm(mtcars)
shiny::runApp()
shinyapps::setAccountInfo(name='justindlea', token='FF7A8F1B9B6C8C7809485A8594E99C6D', secret='Tf3p4n2KZR9WWqM/wLyR9fBfWPhyckyGgBdb6HFj')
shiny::runApp()
shiny::runApp()
setwd("C:\\datascience\\investment\\NFL Plays\\Data")
load(".RData")
View(sea)
model <- lm(TYPE ~ DWN + YTG + ZONE, data=sea)
predict(model, data.frame(DWN=1, YTG=10, ZONE=1))
model <- lm(as.character(TYPE) ~ DWN + YTG + ZONE, data=sea)
predict(model, data.frame(DWN=1, YTG=10, ZONE=1))
sea$TYPE <- as.character(sea$TYPE)
View(sea)
model <- lm(TYPE ~ DWN + YTG + ZONE, data=sea)
predict(model, data.frame(DWN=1, YTG=10, ZONE=1))
seaRP <- subset(sea, TYPE=='PASS' | TYPE=='RUSH')
model <- lm(TYPE ~ DWN + YTG + ZONE, data=sea)
model <- lm(TYPE ~ DWN + YTG + ZONE, data=seaRP)
View(seaRP)
seaRP$TYPE <- as.factor(seaRP$TYPE)
model <- lm(TYPE ~ DNW + YTG + ZONE, data=seaRP)
model <- lm(TYPE ~ DWN + YTG + ZONE, data=seaRP)
predict(model, data.frame(DWN=1, YTG=10, ZONE=2))
predict(model, data.frame(DWN=2, YTG=10, ZONE=2))
predict(model, data.frame(DWN=3, YTG=10, ZONE=2))
predict(model, data.frame(DWN=3, YTG=1, ZONE=2))
runApp()
showMethods("show")
sourceEnvironment
rm(core,mtcars,pass,player,rush,sea)
predict(model, data.frame(DWN=2,YTG=7,ZONE=4))
subset(seaRP, DWN==2 & YTG==7 & ZONE==4)
subset(seaRP, DWN==2 & YTG==7)
model <- lm(TYPE ~ DWN + YTG, data=seaRP)
predict(model, data.frame(DWN=2,YTG=7))
predict(model, data.frame(DWN=2,YTG=2))
predict(model, data.frame(DWN=2,YTG=1))
predict(model, data.frame(DWN=2,YTG=15))
setwd("C:\\datascience\\dataproducts")
model <- lm(TYPE ~ DWN + YTG, data=seaRP, type="logit")
?lm
model <- lm(TYPE ~ DWN + YTG, data=seaRP, family=logit())
library(logit)
model <- lm(TYPE ~ DWN + YTG, data=seaRP, family=binomial)
model <- glm(TYPE ~ DWN + YTG, data=seaRP, family=binomial)
predict(model, data.frame(DWN=1, YTG=10))
data(mtcars)
mtcars
show(mtcars)
View(mtcars)
predict(model, data.frame(DWN=1, YTG=10), type="response")
?predict
?glm
